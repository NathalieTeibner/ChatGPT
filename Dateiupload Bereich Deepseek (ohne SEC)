<!DOCTYPE html> 

<html lang="de"> 

<head> 

    <meta charset="UTF-8"> 

    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 

    <title>Datei-Upload</title> 

    <link rel="stylesheet" href="styles.css"> 

</head> 

<body> 

    <div class="upload-container"> 

        <h1>Datei hochladen</h1> 

        <form id="uploadForm"> 

            <div class="drop-area" id="dropArea"> 

                <span class="drop-message">Dateien hierher ziehen oder</span> 

                <input type="file" id="fileInput" multiple> 

                <label for="fileInput" class="browse-btn">Datei auswählen</label> 

            </div> 

            <div class="file-list" id="fileList"></div> 

            <button type="submit" class="upload-btn">Hochladen</button> 

        </form> 

        <div class="progress-container" id="progressContainer" style="display: none;"> 

            <div class="progress-bar" id="progressBar"></div> 

            <span class="progress-text" id="progressText">0%</span> 

        </div> 

        <div id="statusMessage"></div> 

    </div> 

 

    <script src="script.js"></script> 

</body> 

</html> 

body { 

    font-family: Arial, sans-serif; 

    display: flex; 

    justify-content: center; 

    align-items: center; 

    min-height: 100vh; 

    margin: 0; 

    background-color: #f5f5f5; 

} 

 

.upload-container { 

    background: white; 

    padding: 2rem; 

    border-radius: 8px; 

    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); 

    width: 100%; 

    max-width: 500px; 

} 

 

h1 { 

    text-align: center; 

    margin-bottom: 1.5rem; 

} 

 

.drop-area { 

    border: 2px dashed #ccc; 

    border-radius: 6px; 

    padding: 2rem; 

    text-align: center; 

    transition: all 0.3s; 

    margin-bottom: 1rem; 

} 

 

.drop-area.highlight { 

    border-color: #4CAF50; 

    background-color: #f0fff0; 

} 

 

.drop-message { 

    display: block; 

    margin-bottom: 1rem; 

} 

 

input[type="file"] { 

    display: none; 

} 

 

.browse-btn { 

    background: #4CAF50; 

    color: white; 

    padding: 0.5rem 1rem; 

    border-radius: 4px; 

    cursor: pointer; 

    transition: background 0.3s; 

} 

 

.browse-btn:hover { 

    background: #45a049; 

} 

 

.file-list { 

    margin: 1rem 0; 

} 

 

.file-item { 

    display: flex; 

    justify-content: space-between; 

    padding: 0.5rem; 

    border-bottom: 1px solid #eee; 

} 

 

.upload-btn { 

    width: 100%; 

    background: #2196F3; 

    color: white; 

    padding: 0.75rem; 

    border: none; 

    border-radius: 4px; 

    cursor: pointer; 

    font-size: 1rem; 

    transition: background 0.3s; 

} 

 

.upload-btn:hover { 

    background: #0b7dda; 

} 

 

.progress-container { 

    margin-top: 1rem; 

    background: #f1f1f1; 

    border-radius: 4px; 

    height: 20px; 

    position: relative; 

} 

 

.progress-bar { 

    background: #4CAF50; 

    width: 0%; 

    height: 100%; 

    border-radius: 4px; 

    transition: width 0.3s; 

} 

 

.progress-text { 

    position: absolute; 

    top: 50%; 

    left: 50%; 

    transform: translate(-50%, -50%); 

    font-size: 12px; 

} 

 

#statusMessage { 

    margin-top: 1rem; 

    text-align: center; 

    color: #4CAF50; 

    font-weight: bold; 

} 

document.addEventListener('DOMContentLoaded', function() { 

    const dropArea = document.getElementById('dropArea'); 

    const fileInput = document.getElementById('fileInput'); 

    const fileList = document.getElementById('fileList'); 

    const uploadForm = document.getElementById('uploadForm'); 

    const progressContainer = document.getElementById('progressContainer'); 

    const progressBar = document.getElementById('progressBar'); 

    const progressText = document.getElementById('progressText'); 

    const statusMessage = document.getElementById('statusMessage'); 

 

    let files = []; 

 

    // Drag and drop Funktionen 

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => { 

        dropArea.addEventListener(eventName, preventDefaults, false); 

    }); 

 

    function preventDefaults(e) { 

        e.preventDefault(); 

        e.stopPropagation(); 

    } 

 

    ['dragenter', 'dragover'].forEach(eventName => { 

        dropArea.addEventListener(eventName, highlight, false); 

    }); 

 

    ['dragleave', 'drop'].forEach(eventName => { 

        dropArea.addEventListener(eventName, unhighlight, false); 

    }); 

 

    function highlight() { 

        dropArea.classList.add('highlight'); 

    } 

 

    function unhighlight() { 

        dropArea.classList.remove('highlight'); 

    } 

 

    dropArea.addEventListener('drop', handleDrop, false); 

 

    function handleDrop(e) { 

        const dt = e.dataTransfer; 

        const newFiles = dt.files; 

        handleFiles(newFiles); 

    } 

 

    fileInput.addEventListener('change', function() { 

        handleFiles(this.files); 

    }); 

 

    function handleFiles(newFiles) { 

        files = [...files, ...newFiles]; 

        updateFileList(); 

    } 

 

    function updateFileList() { 

        fileList.innerHTML = ''; 

        files.forEach((file, index) => { 

            const fileItem = document.createElement('div'); 

            fileItem.className = 'file-item'; 

             

            const fileName = document.createElement('span'); 

            fileName.textContent = file.name; 

             

            const removeBtn = document.createElement('button'); 

            removeBtn.textContent = '×'; 

            removeBtn.className = 'remove-btn'; 

            removeBtn.onclick = () => removeFile(index); 

             

            fileItem.appendChild(fileName); 

            fileItem.appendChild(removeBtn); 

            fileList.appendChild(fileItem); 

        }); 

    } 

 

    function removeFile(index) { 

        files.splice(index, 1); 

        updateFileList(); 

    } 

 

    // Formular absenden 

    uploadForm.addEventListener('submit', function(e) { 

        e.preventDefault(); 

         

        if (files.length === 0) { 

            statusMessage.textContent = 'Bitte wählen Sie mindestens eine Datei aus.'; 

            statusMessage.style.color = '#f44336'; 

            return; 

        } 

         

        uploadFiles(); 

    }); 

 

    function uploadFiles() { 

        const formData = new FormData(); 

         

        files.forEach(file => { 

            formData.append('files[]', file); 

        }); 

         

        progressContainer.style.display = 'block'; 

        statusMessage.textContent = ''; 

         

        // Hier würden Sie normalerweise eine AJAX-Anfrage an Ihren Server senden 

        // Dies ist nur eine Simulation des Uploads 

        simulateUpload(formData); 

    } 

 

    function simulateUpload(formData) { 

        let progress = 0; 

        const interval = setInterval(() => { 

            progress += Math.random() * 10; 

            if (progress >= 100) { 

                progress = 100; 

                clearInterval(interval); 

                statusMessage.textContent = 'Upload abgeschlossen!'; 

                statusMessage.style.color = '#4CAF50'; 

                files = []; 

                updateFileList(); 

                setTimeout(() => { 

                    progressContainer.style.display = 'none'; 

                    progressBar.style.width = '0%'; 

                    progressText.textContent = '0%'; 

                }, 2000); 

            } 

             

            progressBar.style.width = `${progress}%`; 

            progressText.textContent = `${Math.round(progress)}%`; 

        }, 300); 

    } 

}); 
